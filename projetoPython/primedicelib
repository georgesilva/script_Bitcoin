#!/usr/bin/python
# -*- coding: utf-8 -*-
import signal, os, logging
import mechanize, urllib, urllib2, cookielib, json
import random, re, time, math

mode = "lo"
clientSeed = "0"
csrf_token = "0"
bet = 0
maxWait = 200
stop = False
timeout = False
lossesCounter = 0
randNumber = '0.23360912990756333'
saldoInicial = 0
sumLosses = 0
sumWin = 0
maxLoss = 0
initTime = 0
iterator = 0
loseStats = [[] for k in range(200)]


def openBrowser():
	# Browser
	br = mechanize.Browser()

	# Cookie Jar
	cj = cookielib.LWPCookieJar()
	br.set_cookiejar(cj)

	# Browser options
	br.set_handle_equiv(True)
	br.set_handle_gzip(True)
	br.set_handle_redirect(True)
	br.set_handle_referer(True	)
	br.set_handle_robots(False)

	# Follows refresh 0 but not hangs on refresh > 0
	br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

	# Want debugging messages?
	br.set_debug_http(False)
	br.set_debug_redirects(False)
	br.set_debug_responses(False)

	# User-Agent (this is cheating, ok?)
	br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2522.1 Safari/537.36')]


	# Open some site
	response = br.open('http://www.primedice.com/play')

	return br


def makeBet(br, accesToken, initBet, stopPercentage, target, condition, multiplier, imfe, duracao):
	"Funcao que faz a aposta utilizando os parametros. Retorna o balanÃ§o atualizado em BTCs."
	global iterator
	global saldoInicial
	global stop
	global sumLosses
	global lossesCounter
	global sumWin
	global maxLoss
	global bet
	initiate()

	# Configurando parametros da aposta
	bet = float(initBet)
	aposta = {u'amount': initBet, u'condition': condition, u'target': target}
	aposta = urllib.urlencode(aposta)

	with GracefulInterruptHandler() as h:
		while True:
			iterator = iterator+1
			
			#SIGALRM is only usable on a unix platform
			signal.signal(signal.SIGALRM, timeoutHandler)
			#change 5 to however many seconds you need
			signal.alarm(15)
			try:
				response = br.open('http://api.primedice.com/api/bet?access_token='+accesToken, aposta)
			except urllib2.URLError as e:
				logging.debug("Request Timed Out occurred. Waiting a few moments before trying again.")
				time.sleep(2)
				continue
			except TimeExceededError:
				logging.debug("###### Request hanging. Waiting to refresh. #######")
				time.sleep(5)
				continue
			except:
				logging.info("Erro louco.")
				time.sleep(5)
				continue
			signal.alarm(0)

			responseObj = json.loads(response.read())

			
			balance = responseObj['user']['balance']
			if iterator == 1:
				saldoInicial = balance
			if iterator % 200 == 0:
				printStats(balance)

			if responseObj['bet']['win']:
				sumWin = sumWin+1
				aposta = reset(initBet, condition, target)
				if getExecTime() > duracao:
					logging.info("<<<###### Atinjido tempo limite. ######>>>")
					stop = True
				if lossesCounter > maxLoss:
					maxLoss = lossesCounter
				logging.info(" ")
				logging.info('You WON! After losing ' + str(lossesCounter) + ' times. Restarting now!')
				logging.info('Your maximum number of consecutive losses is ' + str(maxLoss))
				logging.info('Current: ' +str(balance))
				if lossesCounter <= 200:
					loseStats[lossesCounter] = loseStats[lossesCounter]+1
				lossesCounter = 0
				# Fim do programa
				if stop ==  True:
					stop = False
					printStats(balance)
					return balance
			else:
				sumLosses = sumLosses+1
				lossesCounter = lossesCounter+1
				if lossesCounter > 0:
					aposta = multiply(multiplier, condition, target)
				#if iHaveEnoughMoni(bet, balance, stopPercentage) == False:
				if lossesCounter > 37:
					logging.warn('Your bet reached a maximum threshold. Reseting for your safety. ' + str(lossesCounter))
					logging.warn("")
					aposta = {u'amount': initBet, u'condition': condition, u'target': target}
					aposta = urllib.urlencode(aposta)
					stop = True
					printStats(balance)
					return balance
					if lossesCounter > maxLoss:
						maxLoss = lossesCounter
					if lossesCounter <= 200:
						loseStats[lossesCounter] = loseStats[lossesCounter]+1
				logging.info('You LOST! Multiplying your bet and betting again.')
			getRandomWait()
			if h.interrupted:
				stop = True
				logging.info("#####################################################################")
				logging.info("Voce apertou Ctrl-C. Saindo...")
	return balance



def getInitialBalance(br):
	""
	return saldoInicial


def getToken(br):
	"Extrai o token necessario para enviar como parametro a cada aposta"
	response = br.open('https://freebitco.in/?op=home&tab=double_your_btc#')
	cookie = response.info()['Set-Cookie']
	if 'csrf_token' in cookie:
		init = cookie.find('=')
		end = cookie.find(';')
		csrf_token = cookie[init+1:end]

def reset(initBet, condition, target):
	global bet
	bet = float(initBet)
	aposta = {u'amount': initBet, u'condition': condition, u'target': target}
	aposta = urllib.urlencode(aposta)
	return aposta

def multiply(multiplier, condition, target):
	"Aumenta as apostas dentro de um ciclo de perdas e salva no objeto"
	global bet
	bet = bet * multiplier
	logging.debug(bet)
	aposta = {u'amount': str('{:.0f}'.format(bet)), u'condition': condition, u'target': target}
	aposta = urllib.urlencode(aposta)
	return  aposta

def getRandomWait():
	"Faz com que os tempos entre uma aposta e outra seja aleatorio"
	wait = random.random() * maxWait
	wait = wait+100
	horario = str( time.asctime( time.localtime(time.time()) ) )
	logging.info('Waiting for ' + str('{:.0f}'.format(wait)) + 'ms before next bet.' + horario)
	tempo = wait/1000
	time.sleep(tempo)
	return

def iHaveEnoughMoni(bet, balance, pctg):
	"Verifica se esta na hora de parar. Retorna true or false"
	return (balance * pctg) > bet

def initiate():
	global iterator
	global loseStats
	global initTime
	iterator = 0
	initTime = time.time()
	for i in range(0,200):
		loseStats[i] = 0

def getExecTime():
	"Retorna tempo de execucao em minutos"
	global initTime
	duration = (time.time() - initTime)/60
	return duration

def formatTime(duration):
	"Passa tempo para texto"
	twodigitsFormat = '{:.2f}'
	eightdigitsFormat = '{:.8f}'
	
	if duration < 120:
		minutos = twodigitsFormat.format(duration)
		tempoTxt = str(minutos) + ' minutes.'
	else:
		horas = duration/60
		horas = twodigitsFormat.format(horas)
		tempoTxt =  str(horas) + ' hours.'
	return tempoTxt


def printStats(balance):
	"Salva estatisticas em arquivo texto"
	global saldoInicial
	twodigitsFormat = '{:.2f}'
	eightdigitsFormat = '{:.8f}'
	sumTotal = sumWin + sumLosses
	pctWin = float(sumWin)/float(sumTotal)
	pctWin = pctWin*100
	pctLost = float(sumLosses)/float(sumTotal)
	pctLost = pctLost*100

	logging.info('Winings: ' + str(sumWin) + ' [' + str(twodigitsFormat.format(pctWin)) + '%]. Losses: ' + str(sumLosses) + ' [' + str(twodigitsFormat.format(pctLost)) + '%]. Total: ' + str(sumTotal))
	
	strTempo = formatTime(getExecTime())


	balance = balance/100000000
	saldoInicial = saldoInicial/100000000
	profit = eightdigitsFormat.format(balance - saldoInicial)
	
	logging.info('You Won ' + str(profit) + ' BTCs.')
	logging.info('Your actual balance is: ' + str(eightdigitsFormat.format(balance)) + ' BTCs. Running for ' + strTempo)
	for i in range(0, 200):
		if loseStats[i] != 0:
			logging.info(str(i) + ' => ' + str(loseStats[i]) + ' times.')

def timeoutHandler(signum, frame):
	logging.warn("sig alarm")
	raise TimeExceededError



#Gerenciador de sinal de parada
class TimeExceededError():
	def __init__(self):
		value = "Hanging function."
		self.value = value
	def __str__(self):
		return repr(self.value)

class GracefulInterruptHandler(object):

    def __init__(self, sig=signal.SIGINT):
        self.sig = sig

    def __enter__(self):

        self.interrupted = False
        self.released = False

        self.original_handler = signal.getsignal(self.sig)

        def handler(signum, frame):
            self.release()
            self.interrupted = True

        signal.signal(self.sig, handler)

        return self

    def __exit__(self, type, value, tb):
        self.release()

    def release(self):

        if self.released:
            return False

        signal.signal(self.sig, self.original_handler)

        self.released = True

        return True
	
